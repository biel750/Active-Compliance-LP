// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: fdVBcMZFKfbQD3WsHm8wo
// Component: bUxVNZ5IV6i2bm
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: YEQmzCtQKI4OO/component
import { Menu } from "../../Menu"; // plasmic-import: eExYr95IkB7HJf/codeComponent

import { useScreenVariants as useScreenVariantspQljJUlt3Vw4Y8 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: pQljJUlt3Vw4Y8/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_active_compliance.module.css"; // plasmic-import: fdVBcMZFKfbQD3WsHm8wo/projectcss
import sty from "./PlasmicHeaderCreattor.module.css"; // plasmic-import: bUxVNZ5IV6i2bm/css

import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: pqpZPVUtHEq8SY/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: 85nXgXtej21GKw/icon
import MenuSvgrepoComsvgIcon from "./icons/PlasmicIcon__MenuSvgrepoComsvg"; // plasmic-import: B0jsJa8zMDZLrx/icon

export type PlasmicHeaderCreattor__VariantMembers = {};

export type PlasmicHeaderCreattor__VariantsArgs = {};
type VariantPropType = keyof PlasmicHeaderCreattor__VariantsArgs;
export const PlasmicHeaderCreattor__VariantProps = new Array<VariantPropType>();

export type PlasmicHeaderCreattor__ArgsType = {
  children?: React.ReactNode;
};

type ArgPropType = keyof PlasmicHeaderCreattor__ArgsType;
export const PlasmicHeaderCreattor__ArgProps = new Array<ArgPropType>(
  "children"
);

export type PlasmicHeaderCreattor__OverridesType = {
  root?: p.Flex<"div">;
  img?: p.Flex<typeof p.PlasmicImg>;
  menu?: p.Flex<typeof Menu>;
};

export interface DefaultHeaderCreattorProps {
  children?: React.ReactNode;
  className?: string;
}

function PlasmicHeaderCreattor__RenderFunc(props: {
  variants: PlasmicHeaderCreattor__VariantsArgs;
  args: PlasmicHeaderCreattor__ArgsType;
  overrides: PlasmicHeaderCreattor__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantspQljJUlt3Vw4Y8()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      {(hasVariant(globalVariants, "screen", "mobileOnly") ? true : true) ? (
        <p.Stack
          as={"header"}
          hasGap={true}
          className={classNames(projectcss.all, sty.header__oLnuN)}
        >
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__iLrZi)}
          >
            {p.renderPlasmicSlot({
              defaultContents: true ? (
                <div className={classNames(projectcss.all, sty.freeBox__w7M7I)}>
                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link__bNqee
                    )}
                    component={Link}
                    href={`/`}
                    platform={"nextjs"}
                  >
                    {"Início"}
                  </p.PlasmicLink>

                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link__mDmeH
                    )}
                    component={Link}
                    platform={"nextjs"}
                  >
                    {"Quem somos"}
                  </p.PlasmicLink>

                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link___2Oibb
                    )}
                    component={Link}
                    platform={"nextjs"}
                  >
                    {"Como funciona?"}
                  </p.PlasmicLink>

                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link__pS8Ch
                    )}
                    component={Link}
                    platform={"nextjs"}
                  >
                    {"Avaliações"}
                  </p.PlasmicLink>

                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link__wnjO3
                    )}
                    component={Link}
                    platform={"nextjs"}
                  >
                    {"Creattors"}
                  </p.PlasmicLink>
                </div>
              ) : null,
              value: args.children
            })}

            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__jYkEj)}
            >
              {true ? (
                <div className={classNames(projectcss.all, sty.freeBox__o5Vrz)}>
                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link__yjUrx
                    )}
                    component={Link}
                    platform={"nextjs"}
                  >
                    {"Entrar"}
                  </p.PlasmicLink>

                  <p.PlasmicImg
                    data-plasmic-name={"img"}
                    data-plasmic-override={overrides.img}
                    alt={""}
                    className={classNames(sty.img)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={"16px" as const}
                    displayMaxWidth={"18px" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"auto" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/active_compliance/images/group50670Png.png",
                      fullWidth: 19,
                      fullHeight: 18,
                      aspectRatio: undefined
                    }}
                  />
                </div>
              ) : null}

              <Button
                className={classNames("__wab_instance", sty.button__oWpj)}
                color={"softPink" as const}
                endIcon={
                  <IconIcon
                    className={classNames(projectcss.all, sty.svg__raP7C)}
                    role={"img"}
                  />
                }
                shape={"rounded" as const}
                size={"minimal" as const}
                startIcon={null}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__bacMf
                  )}
                >
                  {"Criar conta"}
                </div>
              </Button>
            </p.Stack>
          </p.Stack>
        </p.Stack>
      ) : null}
      {(hasVariant(globalVariants, "screen", "mobileOnly") ? true : false) ? (
        <p.Stack
          as={"header"}
          hasGap={true}
          className={classNames(projectcss.all, sty.header__ccMdX)}
        >
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__f96Bl)}
          >
            {(
              hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
            ) ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__nen6Q)}
              >
                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link___16L1Y
                  )}
                  component={Link}
                  href={`/`}
                  platform={"nextjs"}
                >
                  {"Página Inicial"}
                </p.PlasmicLink>

                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__rdOm
                  )}
                  component={Link}
                  platform={"nextjs"}
                >
                  {"Como funciona?"}
                </p.PlasmicLink>

                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__eFrxr
                  )}
                  component={Link}
                  platform={"nextjs"}
                >
                  {"Lojas Parceiras"}
                </p.PlasmicLink>

                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__rIsZ
                  )}
                  component={Link}
                  platform={"nextjs"}
                >
                  {"Creattors"}
                </p.PlasmicLink>

                <Button
                  className={classNames("__wab_instance", sty.button__e04I0)}
                  color={"clear" as const}
                  endIcon={
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__h8Lwi)}
                      role={"img"}
                    />
                  }
                  startIcon={
                    <ChecksvgIcon
                      className={classNames(projectcss.all, sty.svg__mWgz)}
                      role={"img"}
                    />
                  }
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__aTfkI
                    )}
                  >
                    {"Login"}
                  </div>
                </Button>

                <Button
                  className={classNames("__wab_instance", sty.button__sdUDo)}
                  color={"softPink" as const}
                  endIcon={
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg___4LEs0)}
                      role={"img"}
                    />
                  }
                  shape={"rounded" as const}
                  size={"minimal" as const}
                  startIcon={
                    <ChecksvgIcon
                      className={classNames(projectcss.all, sty.svg__ogy44)}
                      role={"img"}
                    />
                  }
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__d2Bpj
                    )}
                  >
                    {"Criar conta"}
                  </div>
                </Button>
              </p.Stack>
            ) : null}
            {(
              hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
            ) ? (
              <div className={classNames(projectcss.all, sty.freeBox__qnFwx)}>
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : true
                ) ? (
                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__dVpYr
                    )}
                    component={Link}
                    platform={"nextjs"}
                  >
                    {(
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? true
                        : true
                    ) ? (
                      <MenuSvgrepoComsvgIcon
                        className={classNames(projectcss.all, sty.svg__v7Bx8)}
                        role={"img"}
                      />
                    ) : null}
                  </p.PlasmicLink>
                ) : null}
              </div>
            ) : null}

            <Menu
              data-plasmic-name={"menu"}
              data-plasmic-override={overrides.menu}
              className={classNames("__wab_instance", sty.menu)}
            >
              <p.PlasmicLink
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.link__wjl3J
                )}
                component={Link}
                href={`/`}
                platform={"nextjs"}
              >
                {"Início"}
              </p.PlasmicLink>

              <p.PlasmicLink
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.link__pfe6G
                )}
                component={Link}
                platform={"nextjs"}
              >
                {hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "Quem somos?"
                  : "Como funciona?"}
              </p.PlasmicLink>

              <p.PlasmicLink
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.link__j69Vq
                )}
                component={Link}
                platform={"nextjs"}
              >
                {hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "Como funciona?"
                  : "Como funciona?"}
              </p.PlasmicLink>

              <p.PlasmicLink
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.link__wWFnH
                )}
                component={Link}
                platform={"nextjs"}
              >
                {hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "Avaliações"
                  : "Como funciona?"}
              </p.PlasmicLink>

              <p.PlasmicLink
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.link__e3UkZ
                )}
                component={Link}
                platform={"nextjs"}
              >
                {"Creattors"}
              </p.PlasmicLink>
            </Menu>
          </p.Stack>
        </p.Stack>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "img", "menu"],
  img: ["img"],
  menu: ["menu"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  img: typeof p.PlasmicImg;
  menu: typeof Menu;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHeaderCreattor__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHeaderCreattor__VariantsArgs;
    args?: PlasmicHeaderCreattor__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHeaderCreattor__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHeaderCreattor__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHeaderCreattor__ArgProps,
          internalVariantPropNames: PlasmicHeaderCreattor__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicHeaderCreattor__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHeaderCreattor";
  } else {
    func.displayName = `PlasmicHeaderCreattor.${nodeName}`;
  }
  return func;
}

export const PlasmicHeaderCreattor = Object.assign(
  // Top-level PlasmicHeaderCreattor renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    menu: makeNodeComponent("menu"),

    // Metadata about props expected for PlasmicHeaderCreattor
    internalVariantProps: PlasmicHeaderCreattor__VariantProps,
    internalArgProps: PlasmicHeaderCreattor__ArgProps
  }
);

export default PlasmicHeaderCreattor;
/* prettier-ignore-end */
